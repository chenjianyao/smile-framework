<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.spring.platform</groupId>
		<artifactId>platform-bom</artifactId>
		<version>2.0.8.RELEASE</version>
		<relativePath />
	</parent>

	<groupId>com.smileframework</groupId>
	<artifactId>smile-dependencies</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>

	<properties>
	    <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
		<java.version>1.8</java.version>
		<!-- Overriding a version -->
		<smileframework.version>1.0.0-SNAPSHOT</smileframework.version>
		<com.alibaba.fastjson.version>1.2.17</com.alibaba.fastjson.version>
		<com.alibaba.druid.version>1.0.18</com.alibaba.druid.version>
		<protostuff.version>1.0.12</protostuff.version>
		<objenesis.version>2.4</objenesis.version>
		<mina.version>2.0.16</mina.version>
		<commons-dbutils.version>1.6</commons-dbutils.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- ####################第三方常用包################ -->
			<!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>fastjson</artifactId>
				<version>${com.alibaba.fastjson.version}</version>
			</dependency>

			<!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>
				<version>${com.alibaba.druid.version}</version>
			</dependency>

			<!-- protostuff -->
			<dependency>
				<groupId>com.dyuproject.protostuff</groupId>
				<artifactId>protostuff-core</artifactId>
				<version>${protostuff.version}</version>
			</dependency>
			<dependency>
				<groupId>com.dyuproject.protostuff</groupId>
				<artifactId>protostuff-runtime</artifactId>
				<version>${protostuff.version}</version>
			</dependency>

			<!-- objenesis -->
			<!-- https://mvnrepository.com/artifact/org.objenesis/objenesis -->
			<dependency>
				<groupId>org.objenesis</groupId>
				<artifactId>objenesis</artifactId>
				<version>${objenesis.version}</version>
			</dependency>
			<dependency>
			    <groupId>commons-dbutils</groupId>
			    <artifactId>commons-dbutils</artifactId>
			    <version>${commons-dbutils.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.mina</groupId>
				<artifactId>mina-core</artifactId>
				<version>${mina.version}</version>
			</dependency>
			<!-- ####################模块包################ -->
			<dependency>
				<groupId>com.smileframework</groupId>
				<artifactId>smile-dependencies</artifactId>
				<version>${smileframework.version}</version>
			</dependency>
			<dependency>
				<groupId>com.smileframework</groupId>
				<artifactId>smile-dependencies-common</artifactId>
				<version>${smileframework.version}</version>
			</dependency>
			<dependency>
				<groupId>com.smileframework</groupId>
				<artifactId>smile-dependencies-ssm</artifactId>
				<version>${smileframework.version}</version>
			</dependency>
			<dependency>
				<groupId>com.smileframework</groupId>
				<artifactId>smile-dependencies-ssi</artifactId>
				<version>${smileframework.version}</version>
			</dependency>
			<dependency>
				<groupId>com.smileframework</groupId>
				<artifactId>smile-dependencies-ssh</artifactId>
				<version>${smileframework.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<!-- 
			surefire 插件用来在maven构建生命周期的test phase执行一个应用的单元测试。它会产生两种不同形式的测试结果报告：
				1）.纯文本
				2）.xml文件格式的
				默认情况下，这些文件生成在工程的${basedir}/target/surefire-reports，目录下（basedir指的是pom文件所在的目录）。 
				它可以运行任何testNG,Junit,pojo写的单元测试 
			-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
					<showWarnings>true</showWarnings>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<skip>false</skip> <!-- 默认不调过单元测试 -->
				</configuration>
			</plugin>
			
			<!-- maven-resources-plugin则用来处理资源文件 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<includeEmptyDirs>true</includeEmptyDirs>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			
			<!-- 生成sources源码包的插件 --> 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
				<executions>
					<execution>
						<id>attach-sources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>jar-no-fork</goal>
						</goals>
						<configuration>
							<archive>
								<manifest>
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
									<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								</manifest>
								<manifestEntries>
									<Implementation-Build-Date>${maven.build.timestamp}</Implementation-Build-Date>
									<Implementation-Build-Compile-JDK>${java.version}</Implementation-Build-Compile-JDK>
								</manifestEntries>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 文档打包-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
					<aggregate>true</aggregate>
					<charset>${project.build.sourceEncoding}</charset>
					<docencoding>${project.build.sourceEncoding}</docencoding>
				</configuration>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<additionalparam>-Xdoclint:none</additionalparam>
							<archive>
								<manifest>
									<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
									<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								</manifest>
								<manifestEntries>
									<Implementation-Build-Date>${maven.build.timestamp}</Implementation-Build-Date>
									<Implementation-Build-Compile-JDK>${java.version}</Implementation-Build-Compile-JDK>
								</manifestEntries>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- 编译打包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Build-Date>${maven.build.timestamp}</Implementation-Build-Date>
							<Implementation-Build-Compile-JDK>${java.version}</Implementation-Build-Compile-JDK>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-clean-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin> -->
			
		</plugins>

		<pluginManagement>
			<plugins>

			</plugins>
		</pluginManagement>
	</build>

</project>