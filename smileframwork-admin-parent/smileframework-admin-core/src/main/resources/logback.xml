<?xml version="1.0" encoding="UTF-8" ?>
<!--************************************************************************** 
	 scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.
	 scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.
	 debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 
**************************************************************************-->
<configuration scan="true" scanPeriod="1800 seconds" debug="false">
    
    <property name="USER_HOME" value="logs" />
    <property scope="context" name="FILE_NAME" value="log" />
    <timestamp key="byDateTime" datePattern="yyyy-MM-dd" />
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
	
	<!--************************************************************************** 
	 <appender>是<configuration>的子节点，是负责写日志的组件。<appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。
		ConsoleAppender:把日志添加到控制台	
		FileAppender:把日志添加到文件
		RollingFIleAppender:滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。
	**************************************************************************-->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--  -->
        <encoder charset="UTF-8" class="com.smileframework.admin.core.logback.LogBackExEncoder">
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%UUID] %-5level %logger{50}:%L - %msg%n</pattern>
        </encoder>
        <!-- 此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>
    </appender>

    <appender name="file-info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <prudent>false</prudent>
        <file>logs/${FILE_NAME}-info.log</file>
		<!--************************************************************************** 
		 <rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
		 TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责触发滚动。
		 FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略。
		**************************************************************************-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily hours -->
            <fileNamePattern>logs/${byDateTime}/${FILE_NAME}-info-%d{yyyy-MM-dd-HH}-%i.log.zip </fileNamePattern>
            <maxHistory>30</maxHistory>  
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
        	<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level %logger - %msg%n</pattern>
        </encoder>
        <!-- 此日志文件只记录info级别，不记录大于info级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 异步输出 -->
    <appender name ="async-file-info" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="file-info"/>
    </appender>

    <appender name="file-debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <prudent>false</prudent>
        <file>logs/${FILE_NAME}-debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily hours -->
            <fileNamePattern>logs/${byDateTime}/${FILE_NAME}-debug-%d{yyyy-MM-dd-HH}-%i.log.zip </fileNamePattern>
            <maxHistory>30</maxHistory>  
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level %logger - %msg%n</pattern>
        </encoder>
        <!-- 此日志文件只记录DEBUG级别，不记录大于DEBUG级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 异步输出 -->
    <appender name ="async-file-debug" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="file-debug"/>
    </appender>

    <appender name="file-warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <prudent>false</prudent>
        <file>logs/${FILE_NAME}-warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily hours -->
            <fileNamePattern>logs/${byDateTime}/${FILE_NAME}-warn-%d{yyyy-MM-dd-HH}-%i.log.zip </fileNamePattern>
            <maxHistory>30</maxHistory>  
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
          <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level %logger - %msg%n</pattern>
        </encoder>
        <!-- 此日志文件只记录warn级别，不记录大于warn级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name ="async-file-warn" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="file-warn"/>
    </appender>

    <appender name="file-error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <prudent>false</prudent>
        <file>logs/${FILE_NAME}-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/${byDateTime}/${FILE_NAME}-error-%d{yyyy-MM-dd-HH}-%i.log.zip </fileNamePattern>
            <maxHistory>30</maxHistory>  
            <maxFileSize>100MB</maxFileSize>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
           <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %level %logger - %msg%n</pattern>
        </encoder>
        <!-- 此日志文件只记录ERROR级别，不记录大于ERROR级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <appender name ="async-file-error" class= "ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold >0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>512</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref ="file-error"/>
    </appender>
 	
	<!--************************************************************************** 
	 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
	name：用来指定受此logger约束的某一个包或者具体的某一个类。
	level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。
	如果未设置此属性，那么当前logger将会继承上级的级别。
	addtivity：是否向上级logger传递打印信息。默认是true。
	logback为java中的包  未设置level 则继承root中的level值debug 
	logback.LogbackDemo：类的全路径 additivity为false表示此logger的打印信息不再向上级传递   
	**************************************************************************--> 
	<logger name="logback" /> 
	<logger name="logback.LogbackDemo" level="INFO" additivity="false">
        <appender-ref ref="STDOUT"/>
        <!-- <appender-ref ref="ASYNC"/> -->
    </logger>
    <logger name="java.sql.PreparedStatement" level="DEBUG" />
    <logger name="java.sql.Connection" level="DEBUG" />
    <logger name="java.sql.Statement" level="DEBUG" />
    <logger name="com.ibatis" level="WARN" />
    <logger name="org.mybatis" level="WARN" />    
    <logger name="org.quartz" level="WARN" />
    <logger name="org.apache.activemq" level="WARN" />
    <logger name="org.springframework" level="INFO" />


 	<!--************************************************************************** 
	也是<logger>元素，但是它是根logger。只有一个level属性，应为已经被命名为”root”.
	level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。
	<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger。
	**************************************************************************--> 
    <!-- 生产环境，将此级别配置为适合的级别，以名日志文件太多或影响程序性能 -->
    <root level="DEBUG">
        <appender-ref ref="STDOUT" />
        <appender-ref ref="async-file-info" />
        <appender-ref ref="async-file-warn" />
        <appender-ref ref="async-file-debug" />
        <appender-ref ref="async-file-error" />
    </root>
</configuration>